In an AWS CloudFormation template, the hierarchy of resources and properties for an API Gateway REST API is typically structured as follows:

    AWS::ApiGateway::RestApi: This is the root resource for your API Gateway REST API, which defines the name of the API and other basic properties. It can be associated with zero or more AWS::ApiGateway::Resource resources.

    AWS::ApiGateway::Resource: This resource is used to define the endpoints of your REST API, which can be associated with zero or more child AWS::ApiGateway::Resource resources or AWS::ApiGateway::Method resources.

    AWS::ApiGateway::Method: This resource is used to define the HTTP methods (e.g. GET, POST, PUT, DELETE) and integration settings for your API Gateway endpoints. It can be associated with a single AWS::ApiGateway::Integration resource and zero or more AWS::ApiGateway::MethodResponse resources.

    AWS::ApiGateway::Integration: This resource is used to define the integration settings for your API Gateway endpoints, such as the AWS service or HTTP endpoint that your API Gateway method should call. It can be associated with zero or more AWS::ApiGateway::IntegrationResponse resources.

    AWS::ApiGateway::MethodResponse: This resource is used to define the response settings (e.g. status codes, headers, response models) for your API Gateway endpoints.

    AWS::ApiGateway::IntegrationResponse: This resource is used to define the response mapping templates for the integration responses of your API Gateway endpoints.

You can also define other resources to further customize your API Gateway REST API, such as AWS::ApiGateway::Authorizer, AWS::ApiGateway::Model, AWS::ApiGateway::Deployment, and AWS::ApiGateway::Stage.

Overall, the structure of your CloudFormation template will depend on the specific requirements of your API Gateway REST API, but the above hierarchy provides a good starting point.



npm install -g serverless

serverless create --template aws-python --path my-service

cd my-service

serverless config credentials --provider aws --key <your_aws_access_key> --secret <your_aws_secret_key>


service: my-service
provider:
  name: aws
  runtime: python3.8
functions:
  my-function:
    handler: handler.my_handler
    events:
      - http:
          path: my-endpoint
          method: post
      - sqs:
          arn: !GetAtt my-queue.Arn
		  
		  
resources:
  Resources:
    my-queue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: my-queue
		

		
custom:
  accountId: ${shell:aws sts get-caller-identity --query Account --output text}

functions:
  myFunction:
    handler: handler.my_handler
    environment:
      ACCOUNT_ID: ${self:custom.accountId}
 






service: my-service

provider:
  name: aws
  runtime: python3.9

functions:
  myFunction:
    handler: handler.my_handler
    events:
      - http:
          path: my-path
          method: post
          integration: aws
          request:
            template:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "body": "$util.base64Encode($inputRoot)"
                }
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$')

resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: my-queue-name

    MyQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt MyQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/prod/POST/my-path"
        Queues:
          - !Ref MyQueue

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: my-api

    ApiGatewayResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: my-path
        RestApiId: !Ref ApiGatewayRestApi

    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        ResourceId: !Ref ApiGatewayResource
        RestApiId: !Ref ApiGatewayRestApi
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS
          Uri: !Sub arn:aws:apigateway:${AWS::Region}:sqs:path/${MyQueue}
          RequestParameters:
            integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          PassthroughBehavior: WHEN_NO_TEMPLATES
          RequestTemplates:
            application/json: "{ \"body\" : \"$util.base64Encode($input.body)\" }"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: true
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Content-Type: true
        ApiKeyRequired: false



  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: my-api-key
      Enabled: true

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Name: my-usage-plan
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref ApiGatewayStage
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.x-api-key: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:sqs:path//${SQS_QUEUE_NAME}'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Content-Type: "'text/plain'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: true
			
			
Resources:
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
      DeploymentId: !Ref ApiGatewayDeployment
      Description: 'Prod Stage'
			