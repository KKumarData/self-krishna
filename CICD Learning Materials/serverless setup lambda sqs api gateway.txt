service: my-serverless-service

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-west-2

functions:
  my-lambda-function:
    handler: my_lambda.handler
    events:
      - sqs:
          arn: !GetAtt my-sqs-queue.Arn
      - http:
          path: /my-api
          method: post

resources:
  Resources:
    my-sqs-queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: my-sqs-queue
        
    my-api-key:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: my-api-key
        StageKey:
          RestApiId: !Ref my-rest-api
          StageName: dev
    
    my-rest-api:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: my-rest-api
        EndpointConfiguration:
          Types:
            - REGIONAL
        ApiKeySource: HEADER
        BinaryMediaTypes:
          - '*/*'

package:
  exclude:
    - node_modules/**
    - .env
  include:
    - my_lambda.py
    - requirements.txt

plugins:
  - serverless-python-requirements





provider:
  name: aws
  runtime: python3.9
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "arn:aws:sqs:us-west-2:<account_id>:<queue_name>"

functions:
  myFunction:
    handler: functions/myModule/handler.myHandler
    events:
      - http:
          path: /myEndpoint
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "arn:aws:lambda:us-west-2:<account_id>:function:<function_name>"
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: "arn:aws:execute-api:us-west-2:<account_id>:<api_id>/*"






provider:
  name: aws
  runtime: python3.9
  stage: dev

functions:
  myFunction:
    handler: handler.my_handler
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:<ACCOUNT_ID>:<SQS_QUEUE_NAME>

plugins:
  - serverless-aws-alias

custom:
  aliases:
    dev:
      - myFunction

resources:
  Outputs:
    API_URL:
      Description: API Endpoint URL
      Value:
        Fn::ImportValue:
          !Sub "${self:provider.stage}-serverless-<MY_APP_NAME>-API"

# API Gateway Configuration
  api:
    stage: dev
    handler: handler.my_handler
    stage: dev
    endpointType: regional
    variables:
      alias: dev
    definition:
      paths:
        /234223234/sqs-role:
          post:
            x-amazon-apigateway-integration:
              type: aws
              uri:
                Fn::Join:
                  - ''
                  - - arn:aws:apigateway:us-east-1:sqs:path/
                    - action: sendMessage
                    - messageBody: $input.body
            responses:
              201:
                description: Created
              400:
                description: Bad Request
