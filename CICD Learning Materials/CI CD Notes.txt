https://www.cloudbees.com/blog/8-cicd-best-practices-your-devops-journey

https://www.digitalocean.com/community/tutorials/an-introduction-to-ci-cd-best-practices

https://stackoverflow.com/questions/3612599/branch-per-release-versus-code-promotion-branches

https://oskari.org/documentation/development/oskari-git-process

https://deepsource.io/blog/git-branch-naming-conventions/

https://www.atlassian.com/git/tutorials/what-is-version-control

https://medium.com/@patrickporto/4-branching-workflows-for-git-30d0aaee7bf

Commit early, commit often. ...   
Keep the builds green. ...
Build only once. ...  
Streamline your tests. ...
Clean your environments. ...
Make it the only way to deploy to production. ...
Monitor and measure your pipeline. ...
Make it a team effort.


Keep Your Pipelines Fast
Isolate and Secure Your CI/CD Environment
Make the CI/CD Pipeline the Only Way to Deploy to Production
Maintain Parity with Production Wherever Possible
Build Only Once and Promote the Result Through the Pipeline
Run Your Fastest Tests Early
Minimize Branching in Your Version Control System
Run Tests Locally Before Committing to the CI/CD Pipeline
Run Tests in Ephemeral Environments When Possible



Monorepos are known for the following benefits:
	Everything at that current commit works together. Changes can be verified across all affected parts of the organization.
	Easy to split code into composable modules
	Easier dependency management
	One toolchain setup
	Code editors and IDEs are “workspace” aware
	Consistent developer experience
In spite of what folks say, they also:
	Give you more deployment flexibility
	Allow you to set up precise ownership policies
	Provide more structure to your source code
	Scale well using familiar tools
But they come with some challenges:
	Trunk-based development is a lot more important
	Not all services work well with monorepos
	Require more sophisticated CI setup
	Require you to think about large-scale changes
	
##############################
Take away:
	
  Build all the services at once
  Ensure tests modules are run parallel to speedup CI pipelines
  Run Your Fastest Tests Early
  Run Tests Locally Before Committing to the CI/CD Pipeline
  Clean unwanted/unnecessary builds/cache in pipelines
  Pipeline is the only way to deploy to production
  Monitor and measure your pipeline
  Keep Your Pipelines Fast
  Isolate and Secure Your CI/CD Environment
  Maintain Parity with Production Wherever Possible
  
  
######################################################

Development Life Cycle


We can use the following steps:

1. Clone prod to dev ( this ensures a pristine development environment )
2. Develop and "unit test" in dev. ( unit test is actually a functional test by the developer, with system testing by QA )
3. When the development is complete, we "promote to test" by:
	3.1   clone prod to test.
	3.2 promote the changes from dev to test ( usually one or more update sets )
4.0 Conduct user acceptance testing and QA testing in the test instance.
	4.1 If we need to fix, we do so in dev with a new update set.   Then apply the update set to test.
5.0 When we receive an acceptance from the user representatives for each change, we promote to prod.
6.0 Gather requirements for next release and repeat


############################################################################################

https://stackoverflow.com/questions/60130103/generating-automatic-release-notes-in-gitlab-for-new-releases
https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb-devutils/-/blob/release-notes-script/Scripts/generate_release_notes_from_gitlab.py
